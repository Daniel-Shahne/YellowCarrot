// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YellowCarrot.Food.Data;

#nullable disable

namespace YellowCarrot.Migrations.FoodDb
{
    [DbContext(typeof(FoodDbContext))]
    [Migration("20221215170518_initFood")]
    partial class initFood
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RecipeTag", b =>
                {
                    b.Property<int>("RecipesRecipeId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("RecipesRecipeId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("RecipeTag");
                });

            modelBuilder.Entity("YellowCarrot.Food.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("QuantityUnit")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            Name = "Tomatssås",
                            Quantity = 1,
                            QuantityUnit = "st",
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientId = 2,
                            Name = "Örter",
                            Quantity = 1,
                            QuantityUnit = "burk",
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientId = 3,
                            Name = "Spaghetti",
                            Quantity = 500,
                            QuantityUnit = "gram",
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientId = 4,
                            Name = "Pizza Dough",
                            Quantity = 1,
                            QuantityUnit = "st",
                            RecipeId = 2
                        },
                        new
                        {
                            IngredientId = 5,
                            Name = "Mozzarella",
                            Quantity = 1,
                            QuantityUnit = "kilogram",
                            RecipeId = 2
                        },
                        new
                        {
                            IngredientId = 6,
                            Name = "Italian spices",
                            Quantity = 100,
                            QuantityUnit = "gram",
                            RecipeId = 2
                        });
                });

            modelBuilder.Entity("YellowCarrot.Food.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            Name = "Spaghetti med köttfärssås",
                            UserId = 1
                        },
                        new
                        {
                            RecipeId = 2,
                            Name = "Margherita",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("YellowCarrot.Food.Models.Step", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("StepId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Steps");

                    b.HasData(
                        new
                        {
                            StepId = 1,
                            Description = "Blanda ihop såsen med örter, och koka spaghettin",
                            Order = 1,
                            RecipeId = 1
                        },
                        new
                        {
                            StepId = 2,
                            Description = "Häll såsen på spaghettin",
                            Order = 2,
                            RecipeId = 1
                        },
                        new
                        {
                            StepId = 3,
                            Description = "Toppa pizzadegen",
                            Order = 1,
                            RecipeId = 2
                        },
                        new
                        {
                            StepId = 4,
                            Description = "Sätt i ugnen",
                            Order = 2,
                            RecipeId = 2
                        });
                });

            modelBuilder.Entity("YellowCarrot.Food.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Italian food"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Meat"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Vegetarian"
                        });
                });

            modelBuilder.Entity("RecipeTag", b =>
                {
                    b.HasOne("YellowCarrot.Food.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowCarrot.Food.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YellowCarrot.Food.Models.Ingredient", b =>
                {
                    b.HasOne("YellowCarrot.Food.Models.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("YellowCarrot.Food.Models.Step", b =>
                {
                    b.HasOne("YellowCarrot.Food.Models.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("YellowCarrot.Food.Models.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
